'use client'
import React, { useState, useEffect } from 'react';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '@/app/firebase';

const Page: React.FC = () => {
  const [documentId, setDocumentId] = useState<string | null>(null);

  const handleAddDocument = async () => {
   
      const docRef = await addDoc(collection(db, 'users'), {
        first: 'Ada',
        last: 'Lovelace',
        born: 1815,
      });
     
   
  };

  useEffect(() => {
    // Check if we are on the client side before running analytics-related code
    if (typeof window !== 'undefined') {
      import('firebase/analytics').then(({ getAnalytics }) => {
        const analytics = getAnalytics();
        // Add your Firebase Analytics code here
        // For example: analytics.logEvent('page_view');
      });
    }
  }, []);

  return (
    <div>
      <button onClick={handleAddDocument}>Add Document</button>
      {documentId && <p>Document ID: {documentId}</p>}
    </div>
  );
};

export default Page;
'use client';
import React, { useState, ChangeEvent } from 'react';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '@/app/firebase';
import RegestrationForm from '@/app/component/RegestrationForm'
const ImageUploader: React.FC = () => {
  const [image, setImage] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);

  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedImage = e.target.files?.[0];
    if (selectedImage) {
      setImage(selectedImage);
    }
  };

  const handleUpload = async () => {
    if (!image) {
      console.error('No image selected.');
      return;
    }

    // Get a reference to the storage service and a reference to the image file

    const imageRef = ref(storage, `images/${image.name}`);

    // Upload the image file to Firebase Storage
    await uploadBytes(imageRef, image);

    // Get the download URL for the uploaded image
    const downloadURL = await getDownloadURL(imageRef);
    console.log(downloadURL+"dfhgdfh")
    // Set the download URL in state or use it as needed
    setImageUrl(downloadURL);
  };

  return (
    <div>
      <RegestrationForm/>
      <input type="file" onChange={handleImageChange} />
      <button onClick={handleUpload}>Upload Image</button>
      {imageUrl && <img src={imageUrl} alt="Uploaded" style={{ maxWidth: '100%' }} />}
    </div>
  );
};

export default ImageUploader;
